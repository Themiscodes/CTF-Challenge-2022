import random

# here the reverse operation to get the secret
DEGREE = 2
MODULUS = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001

# the given seed
SEED=486719205717681949

# the shared that were found (even though one is enough)
shares=[]
shares.append(5007965711751168393774121628019042549951383220918150539222781735471026188185)
shares.append(20129353585483040321906019573137559455600830926957085412014710114060270740054)
shares.append(45364163621195615784395720136911689232703579790721184335933490580263479362740)

# the rest found share 1
# 5007965711751168393774121628019042549951383220918150539222781735471026188185
# 5007965719154398295316829646509289701874861709891808846734792385015541826201
# 5008450889825995898091734451515639318014125762387232722921202428537808597657


# produce the coefficients
poly = []
random.seed(SEED)
for i in range(DEGREE):
    coeff = random.randint(0, MODULUS)
    poly.append(coeff)

# first Lagrange equation
lagrange_me = shares[0] - (poly[0] + poly[1] )% MODULUS

# transform to bytes
secret = lagrange_me.to_bytes(30, byteorder="big")

print(secret)